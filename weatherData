from DBOperations import *
import unidecode
import requests
from collections import OrderedDict

months = {"january": 1,
          "february": 2,
          "march": 3,
          "april": 4,
          "mai": 5,
          "june": 6,
          "july": 7,
          "august": 8,
          "september": 9,
          "october": 10,
          "november": 11,
          "december": 12}
postalcodedict = {}

def get_key(val):
    for key, value in postalcodedict.items():
         if val in value:
             return key
    return "key doesn't exist"

class postalCodes:
    def __init__(self, dbOperations=None):
        self.dbOperations = dbOperations

    def getAllPostalCodes(self):
        if self.dbOperations is None:
            self.dbOperations = DBOperations().getDB()
        self.dbOperations.getConnection()

        try:
            with DBOperations.connection.cursor() as cursor:
                sql = "SELECT * FROM `postalCodes` ORDER BY postalCode ASC"
                cursor.execute(sql)
                codes = cursor.fetchall()
                for code in codes:
                    c = code["postalCode"]
                    d = code["city"]
                    d = unidecode.unidecode(d)
                    postalcodedict.setdefault(d, []).append(c)

        finally:
            cursor.close()
            print(postalcodedict)


class insertData:
    def __init__(self, dbOperations=None):
        self.dbOperations = dbOperations

    def insertWeatherData(self, city, pcLocation):
        if self.dbOperations is None:
            self.dbOperations = DBOperations().getDB()
        self.dbOperations.getConnection()

        try:
            while True:
                city = unidecode.unidecode(city)


                # API interaction with city name
                r = requests.get(
                    'http://api.worldweatheronline.com/premium/v1/weather.ashx?key=55db7fbdf962440c95882732191504&q=' + city + ',Switzerland&format=json')
                json_data = r.json()

                # extracting targeted data on json file (actual temperature, max temp and min temp)
                location = json_data['data']['request'][0]['query']

                maxtempJan = json_data['data']['ClimateAverages'][0]['month'][0]['absMaxTemp']
                maxtempFeb = json_data['data']['ClimateAverages'][0]['month'][1]['absMaxTemp']
                maxtempMar = json_data['data']['ClimateAverages'][0]['month'][2]['absMaxTemp']
                maxtempApr = json_data['data']['ClimateAverages'][0]['month'][3]['absMaxTemp']
                maxtempMai = json_data['data']['ClimateAverages'][0]['month'][4]['absMaxTemp']
                maxtempJun = json_data['data']['ClimateAverages'][0]['month'][5]['absMaxTemp']
                maxtempJul = json_data['data']['ClimateAverages'][0]['month'][6]['absMaxTemp']
                maxtempAug = json_data['data']['ClimateAverages'][0]['month'][7]['absMaxTemp']
                maxtempSep = json_data['data']['ClimateAverages'][0]['month'][8]['absMaxTemp']
                maxtempOct = json_data['data']['ClimateAverages'][0]['month'][9]['absMaxTemp']
                maxtempNov = json_data['data']['ClimateAverages'][0]['month'][10]['absMaxTemp']
                maxtempDec = json_data['data']['ClimateAverages'][0]['month'][11]['absMaxTemp']

                mintempJan = json_data['data']['ClimateAverages'][0]['month'][0]['avgMinTemp']
                mintempFeb = json_data['data']['ClimateAverages'][0]['month'][1]['avgMinTemp']
                mintempMar = json_data['data']['ClimateAverages'][0]['month'][2]['avgMinTemp']
                mintempApr = json_data['data']['ClimateAverages'][0]['month'][3]['avgMinTemp']
                mintempMai = json_data['data']['ClimateAverages'][0]['month'][4]['avgMinTemp']
                mintempJun = json_data['data']['ClimateAverages'][0]['month'][5]['avgMinTemp']
                mintempJul = json_data['data']['ClimateAverages'][0]['month'][6]['avgMinTemp']
                mintempAug = json_data['data']['ClimateAverages'][0]['month'][7]['avgMinTemp']
                mintempSep = json_data['data']['ClimateAverages'][0]['month'][8]['avgMinTemp']
                mintempOct = json_data['data']['ClimateAverages'][0]['month'][9]['avgMinTemp']
                mintempNov = json_data['data']['ClimateAverages'][0]['month'][10]['avgMinTemp']
                mintempDec = json_data['data']['ClimateAverages'][0]['month'][11]['avgMinTemp']

                # when the weather API doesn't recognise the location this part redirects the city to the closest big town
                if "Switzerland" not in location or "USA" in location:
                    print(city)
                    ordered = OrderedDict(postalcodedict)
                    keys = list(ordered.keys())
                    index = keys.index(city)-1
                    print(ordered[keys[index]])
                    closest_pc = int(ordered[keys[index]][0])
                    city = get_key(closest_pc)
                    print("Closest city: "+ city)

                else:
                    print("Successful")

                    with DBOperations.connection.cursor() as cursor:
                        sql = "UPDATE `weatherData` SET `maxtempJan`= %s, `maxtempFeb`= %s, `maxtempMar`= %s, " \
                              "`maxtempApr`= %s, `maxtempMai`= %s, `maxtempJun`= %s, `maxtempJul`= %s, `maxtempAug`= %s, " \
                              "`maxtempSep`= %s, `maxtempOct`= %s, `maxtempNov`= %s, `maxtempDec`= %s, `mintempJan`= %s, " \
                              "`mintempFeb`= %s, `mintempMar`= %s, `mintempApr`= %s, `mintempMai`= %s, `mintempJun`= %s, " \
                              "`mintempJul`= %s, `mintempAug`= %s, `mintempSep`= %s, `mintempOct`= %s, `mintempNov`= %s, " \
                              "`mintempDec`= %s WHERE `postalCode` = %s;"
                        cursor.execute(sql, (maxtempJan, maxtempFeb, maxtempMar, maxtempApr, maxtempMai, maxtempJun, maxtempJul,
                                             maxtempAug, maxtempSep, maxtempOct, maxtempNov, maxtempDec, mintempJan, mintempFeb,
                                             mintempMar, mintempApr, mintempMai, mintempJun, mintempJul, mintempAug, mintempSep,
                                             mintempOct, mintempNov, mintempDec, pcLocation))
                        break

        finally:
            self.dbOperations.connection.commit()


if __name__ == '__main__':
    postalCodes = postalCodes(DBOperations("kezenihi_srmidb3"))
    postalCodes.getAllPostalCodes()

    insertData = insertData(DBOperations("kezenihi_srmidb3"))
    x = 0
    for key, value in postalcodedict.items():
        insertData.insertWeatherData(key, value[0])
        x = x+1
        print(x)
